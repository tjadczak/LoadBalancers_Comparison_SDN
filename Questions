Co zrobiłem:
    - Kolektor SFlow do wizualizacji i wykrywania elephant flowów
    - Zmiana z OpenFlow1.3 na OpenFlow1.5
    - Topologia: 3 serwery, 10 hostów
    - Podstawowa komunikacja serwer <-> host za pomocą group table typu select buckets (podstawowy LB)
    - Implementacja LB: random, round robin, least bandwidth i none
    - Ruch typu 'mice' generowany za pomocą openload'a - możliwość mierzenia responsywności serwerów
    - Ruch typu 'elephant' generowany za pomocą iperf'a - możliwość mierzenia przepływności serwerów i całej 'aplikacji'

Co dalej:
    - różne scenariusze:
        - select buckets + 4 różne LB
        - bez select buckets + 4 różne LB (tylko co wtedy z ruchem HTTP?)
        - może podzielić x serwerów na ruch HTTP a y serwerów tylko po to by przerzucać tam ruch iperf'a?
    - jak DOBRZE ustawić parametry tc.link?
    - jeden host tylko http/iperf czy oba naraz? (iperf zapcha łącze, http w ogóle nie przejdzie?)

Sprawdzić wpływ na ruch tcp udp straty
tablice grupowe czy wpisy per 5 kazdy flow


Ruch:
   openload
   wget
Serwery: 4
Hosty: 3 openload 7 wget

loadBalancingAlgorithm - zwraca server_ip
buckets                - jeśli true tworzy group flowy
                       - tylko jeśli false to tworzy two-way flowy sztywne
elephantServers        - reguluje zwracany server_ip
                       - reguluje send_group_mod i add_group_flows
                       - jeśli większy od 0 uruchamia ElephantFlowMonitor

Konfiguracje:
    4 serwery na group buckets:
        elephantServers = 0
        loadBalancingAlgorithm = 'roundRobin' #bez_znaczenia
        buckets = True
    3 serwery na group buckets + 1 serwer na elephant flows
        elephantServers = 1
        loadBalancingAlgorithm = 'roundRobin' #bez_znaczenia
        buckets = True
    2 serwery na group buckets + 2 serwery na elephant flows random/roundRobin/leastBandwidth
        elephantServers = 2
        loadBalancingAlgorithm = 'roundRobin' / 'random' / 'leastBandwidth'
        buckets = True
    1 serwer na group buckets + 3 serwery na elephant flows random/roundRobin/leastBandwidth
        elephantServers = 3
        loadBalancingAlgorithm = 'roundRobin' / 'random' / 'leastBandwidth'
        buckets = True
    4 serwery na sztywne przypisanie do danego serwera flowu host-serwer random/roundRobin/leastBandwidth
        elephantServers = 0
        loadBalancingAlgorithm = 'roundRobin' #bez_znaczenia
        buckets = False
    3 serwery na sztywne przypisanie do danego serwera flowu host-serwer random/roundRobin/leastBandwidth + 1 serwer na elephant flows
        elephantServers = 1
        loadBalancingAlgorithm = 'roundRobin' #bez_znaczenia
        buckets = False
    2 serwery na sztywne przypisanie do danego serwera flowu host-serwer random/roundRobin/leastBandwidth + 2 serwery na elephant flows random/roundRobin/leastBandwidth
        elephantServers = 2
        loadBalancingAlgorithm = 'roundRobin' / 'random' / 'leastBandwidth'
        buckets = False
    1 serwer na sztywne przypisanie do danego serwera flowu host-serwer random/roundRobin/leastBandwidth + 3 serwery na elephant flows random/roundRobin/leastBandwidth
        elephantServers = 3
        loadBalancingAlgorithm = 'roundRobin' / 'random' / 'leastBandwidth'
        buckets = False


